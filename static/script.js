// ===== script.js =====
document.addEventListener("DOMContentLoaded", function () {
    const themeToggle = document.getElementById("theme-toggle");
    const body = document.body;

    if (localStorage.getItem("theme") === "dark") {
        body.classList.add("dark-theme");
        themeToggle.checked = true;
    }

    themeToggle?.addEventListener("change", () => {
        body.classList.toggle("dark-theme", themeToggle.checked);
        localStorage.setItem("theme", themeToggle.checked ? "dark" : "light");
    });

    const checkMode = document.getElementById("check-mode");
    const textBlock = document.getElementById("text-check");
    const fileBlock = document.getElementById("file-check");
    const urlBlock = document.getElementById("url-check");
    const mainTitle = document.getElementById("main-title");
    const subtitle = document.getElementById("subtitle");

    function showOnly(blockToShow) {
        [textBlock, fileBlock, urlBlock].forEach(block => block.style.display = "none");
        blockToShow.style.display = "block";
    }

    function updateTitleAndSubtitle(mode) {
        switch (mode) {
            case "text":
                mainTitle.textContent = "–ß–∏ –±–µ–∑–ø–µ—á–Ω–∏–π —Ü–µ–π —Ç–µ–∫—Å—Ç?";
                subtitle.textContent = "–í—Å—Ç–∞–≤ —Ç–µ–∫—Å—Ç, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞ —Ñ—ñ—à–∏–Ω–≥";
                break;
            case "file":
                mainTitle.textContent = "–¶–µ–π —Ñ–∞–π–ª –±–µ–∑–ø–µ—á–Ω–∏–π?";
                subtitle.textContent = "–ü—Ä–æ—Å–∫–∞–Ω—É–π—Ç–µ —Ñ–∞–π–ª";
                break;
            case "url":
                mainTitle.textContent = "–ß–∏ –±–µ–∑–ø–µ—á–Ω–µ —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è?";
                subtitle.textContent = "–í—ñ–¥—Å–∫–∞–Ω—É–π—Ç–µ URL-–∞–¥—Ä–µ—Å—É, —è–∫—É –≤–∏ –±–∞–∂–∞—î—Ç–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏";
                break;
        }
    }

    checkMode.addEventListener("change", function () {
        const mode = this.value;
        updateTitleAndSubtitle(mode);
        if (mode === "text") showOnly(textBlock);
        else if (mode === "file") showOnly(fileBlock);
        else if (mode === "url") showOnly(urlBlock);
    });

    updateTitleAndSubtitle(checkMode.value);
    showOnly(textBlock);

    document.getElementById("check-btn").addEventListener("click", () => {
        const mode = checkMode.value;
        const result = document.getElementById("result");
        const gptResult = document.getElementById("gpt-result");
        const finalVerdict = document.getElementById("final-verdict");

        result.textContent = "";
        gptResult.textContent = "";
        if (finalVerdict) finalVerdict.textContent = "";

        if (mode === "text") {
            const text = document.getElementById("email-input").value;
            if (!text.trim()) return alert("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏");

            fetch("/predict-text", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ text: text })
            })
            .then(res => {
                if (res.status === 403) throw new Error("–õ—ñ–º—ñ—Ç –≤–∏—á–µ—Ä–ø–∞–Ω–æ");
                return res.json();
            })
            .then(mlData => {
                result.textContent = `üß™ ML-–º–æ–¥–µ–ª—å: –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —Ñ—ñ—à–∏–Ω–≥—É ${mlData.probability}%`;
                return fetch("/ai-analysis", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ text: text })
                });
            })
            .then(res => {
                if (res.status === 403) throw new Error("–õ—ñ–º—ñ—Ç –≤–∏—á–µ—Ä–ø–∞–Ω–æ");
                return res.json();
            })
            .then(aiData => {
                gptResult.textContent = `ü§ñ AI-–∞–Ω–∞–ª—ñ–∑: ${aiData.ai_opinion}`;
                const mlScore = parseFloat(result.textContent.match(/(\d+\.\d+)/)?.[1] || 0);
                const isPhishing = mlScore > 60 || aiData.ai_opinion.includes("—Ñ—ñ—à–∏–Ω–≥");
                finalVerdict.textContent = isPhishing ? "‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ —Ñ—ñ—à–∏–Ω–≥–æ–≤–∏–º!" : "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤–∏–≥–ª—è–¥–∞—î —Ñ—ñ—à–∏–Ω–≥–æ–≤–∏–º.";
            })
            .catch(err => {
                if (err.message.includes("–õ—ñ–º—ñ—Ç")) {
                    alert("–í–∞—à –ª—ñ–º—ñ—Ç –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –ü—Ä–∏–¥–±–∞–π—Ç–µ Premium –¥–ª—è –Ω–µ–æ–±–º–µ–∂–µ–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É.");
                } else {
                    result.textContent = "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ç–µ–∫—Å—Ç—É";
                }
            });
        }
        else if (mode === "file") {
            const fileInput = document.getElementById("file-input");
            const fileNameDisplay = document.getElementById("selected-file-name");
            if (!fileInput.files.length) return alert("–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏");

            const formData = new FormData();
            formData.append("file", fileInput.files[0]);

            fetch("/check-file", {
                method: "POST",
                body: formData
            })
            .then(res => {
                if (res.status === 403) throw new Error("–õ—ñ–º—ñ—Ç –≤–∏—á–µ—Ä–ø–∞–Ω–æ");
                return res.json();
            })
            .then(data => {
                result.textContent = `–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —Ñ—ñ—à–∏–Ω–≥—É —É —Ñ–∞–π–ª—ñ: ${data.probability}%`;
            })
            .catch(err => {
                if (err.message.includes("–õ—ñ–º—ñ—Ç")) {
                    alert("–í–∞—à –ª—ñ–º—ñ—Ç –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –ü—Ä–∏–¥–±–∞–π—Ç–µ Premium –¥–ª—è –Ω–µ–æ–±–º–µ–∂–µ–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É.");
                } else {
                    result.textContent = "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–∞–π–ª—É";
                }
            });
        }
        else if (mode === "url") {
            const url = document.getElementById("url-input").value;
            const isValidUrl = /^https?:\/\/.+/i.test(url);
            if (!isValidUrl) return alert("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ URL-–ø–æ—Å–∏–ª–∞–Ω–Ω—è");

            const formData = new FormData();
            formData.append("url", url);

            fetch("/check-url", {
                method: "POST",
                body: formData
            })
            .then(res => {
                if (res.status === 403) throw new Error("–õ—ñ–º—ñ—Ç –≤–∏—á–µ—Ä–ø–∞–Ω–æ");
                return res.json();
            })
            .then(data => {
                result.textContent = `–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —Ñ—ñ—à–∏–Ω–≥—É —É –ø–æ—Å–∏–ª–∞–Ω–Ω—ñ: ${data.probability}%`;
            })
            .catch(err => {
                if (err.message.includes("–õ—ñ–º—ñ—Ç")) {
                    alert("–í–∞—à –ª—ñ–º—ñ—Ç –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –ü—Ä–∏–¥–±–∞–π—Ç–µ Premium –¥–ª—è –Ω–µ–æ–±–º–µ–∂–µ–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É.");
                } else {
                    result.textContent = "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ URL";
                }
            });
        }
    });

    // –ö–Ω–æ–ø–∫–∞ Premium (—Ç–∏–º—á–∞—Å–æ–≤–∞)
    const upgradeBtn = document.getElementById("upgrade-btn");
    if (upgradeBtn) {
        upgradeBtn.addEventListener("click", () => {
            alert("üëâ –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ Premium —É —Ä–æ–∑—Ä–æ–±—Ü—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
        });
    }
});
